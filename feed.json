[{"title":"Project 4&#58; Game Programming Essentials","permalink":"https://longestboi.github.io/2022/12/project-4-gpe338.html","link":"https://longestboi.github.io/2022/12/project-4-gpe338.html","date":"2022-12-07T00:00:00-08:00","modified":"2022-12-08T21:46:37-08:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<!-- Set the window title. Before, it had \"&#58\" as plaintext in the title. -->\n<script>window.top.document.title = \"Project 4\";</script>\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/blogSummary.css\" />\n\n<!-- Header -->\n<div id=\"intro-head\">\n        <head1 style=\"text-align: center;\">Project 4</head1>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Project 4 is one of the easiest yet, that doesn't mean I didn't have any issues however. When I first tried to do something akin to property drawers, I immediately disregarded property drawers and went straight to editor scripting and it was the worst mistake I could have made. I did this well before Project 4 was even talked about, so maybe that's why I find the concepts here easy.</p>\n\n<!-- TOC -->\n<div class=\"toc\" style=\"\">\n        <div class=\"tocHead\">Contents:</div>\n        <hr class=\"line\" style=\"width: 100%;\" />\n        <ol>\n                <li><a href=\"#edscript\">Editor Scripting</a></li>\n                <li><a href=\"#attr\">Attributes</a></li>\n                <li><a href=\"#pd\">Property Drawer</a></li>\n\t\t<li><a href=\"#bitmask\">Bitmasking</a></li>\n                <li><a href=\"#so\">Scriptable Objects</a></li>\n        </ol>\n</div>\n<p class=\"indent\"></p>\n\n<div id=\"edscript\" style=\"display: inline-block; \">\n        <head2>Editor Scripting:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Editor script for depreciation warning.\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/EditorScripting.png\" /></p>\n<p class=\"indent\">Editor scripting can be easy, only if you make it easy. Editor scripting is also incredibly powerful, but if you would like to keep the rest of the editor intact while modifying on property, use a property drawer instead. </p>\n<p class=\"indent\">In my own example, I keep the code super simple. I draw a warning, then I draw the regular editor inspector.</p>\n<p><img title=\"Depreciation warning shown in inspector.\" class=\"cImg\" style=\"width: 100% !important; margin-top: -3em !important; margin-bottom: -3em; !important\" src=\"/assets/img/Project 4 - GPE338/EditorScriptingDone.png\" /></p>\n\n<div id=\"attr\" style=\"display: inline-block; \">\n        <head2>Attributes:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Multiple attributes.\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/Attributes.png\" /></p>\n<p class=\"indent\">From hiding variables in the editor or using custom property drawers, there are many reasons to use attributes in Unity. In the code above I use an attribute and a custom property drawer to hide a property depending on an enum variables value.</p>\n<p>The inspector when the attributes are applied:</p>\n<p><img title=\"Custom property drawer in inspector\" class=\"cImg codeImg\" style=\"width: 100% !important; margin-top: -3em !important; margin-bottom: -3em; !important\" src=\"/assets/img/Project 4 - GPE338/Custom_Property_Drawer.png\" /></p>\n\n<div id=\"pd\" style=\"display: inline-block; \">\n        <head2>Property Drawer:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Complex looking property drawer code.\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/EnumDraw.png\" /></p>\n<p class=\"indent\">Property drawers in Unity are really useful if you need to change how one property is drawn. The code above looks absolutely insane, but all it does is get the value of an enum variable and disables the gui of the property if its value is passed to the attribute.</p>\n<p>This is the product of the code:</p>\n<p><img title=\"Custom property drawer in inspector\" class=\"cImg codeImg\" style=\"width: 100% !important; margin-top: -3em !important; margin-bottom: -3em; !important\" src=\"/assets/img/Project 4 - GPE338/Custom_Property_Drawer.png\" /></p>\n\n<div id=\"bitmask\" style=\"display: inline-block; \">\n        <head2>Bitmasking:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Bitmasking code\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/bitmask.png\" /></p>\n<p class=\"indent\">This certainly isn't the method of bitmasking you'd be expecting in Unity, but this is bit masking. This function finds the position of duplicate characters in a string. More documentation on the methodologies behind this function can be found <a class=\"underline\" target=\"_blank\" href=\"https://docs.google.com/document/d/1ZJhWrIwxs3e2ctn2m7Fqu29j7LCXNXrfgtt4Jq5dn6Q/edit?usp=sharing\">here</a>, written in Python3.</p>\n\n<p>With the code:</p>\n<div class=\"excerpt\"><span class=\"codeExt\">FindDuplicateChars.PrintList(<br />&emsp;&emsp;FindDuplicateChars.FindDuplicateCharInString(\"tmpt\")<br />&nbsp;);</span></div>\n<p>prints out this:</p>\n<p><img title=\"Duplicates printed to the console\" class=\"cImg codeImg\" style=\"width: 100% !important; margin-top: -3em !important; margin-bottom: -3em; !important\" src=\"/assets/img/Project 4 - GPE338/duplicateFound.png\" /></p>\n<p class=\"indent\">The reason the duplicate is found at 3 and not 4, is because strings are zero indexed.</p>\n\n<div id=\"so\" style=\"display: inline-block; \">\n        <head2>Scriptable Objects:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Scriptable Object code\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/ScriptableObjectCode.png\" /></p>\n<p class=\"indent\">To create a scriptable object you need to add a <code>CreateAssetMenu</code> attribute above the <code>ScriptableObject</code> deriving class.</p>\n<p><img title=\"Scriptable Object code\" class=\"cImg codeImg\" src=\"/assets/img/Project 4 - GPE338/ScriptableObjectProperty.png\" /></p>\n<p class=\"indent\">The GameManager above has a references to the scriptable object and prints to the console if the debug setting in the scriptable object is true.</p>\n<p class=\"indent\">To complete the reference, drag the scriptable object onto the pointer property in the inspector.</p>\n\n<p><img title=\"Scriptable Object code\" class=\"cImg backDrop\" src=\"/assets/img/Project 4 - GPE338/UnityScriptableObjectScreenshot.png\" /></p>\n\n<p class=\"indent\">Scriptable objects are not typically edited because they are used as psuedo templates, but in my case it is being edited because the scriptable object holds setting data.</p>","excerpt":"Project 4\n        \n\nProject 4 is one of the easiest yet, that doesn't mean I didn't have any issues however. When I first tried to do something akin to property drawers, I immediately disregarded property drawers and went straight to editor scripting and it was the worst mistake I could have made. I did this well before Project 4 was even talked about, so maybe that's why I find the concepts here easy.\n\n\n\n        Contents:\n        \n        \n                Editor Scripting\n                Attributes\n                Property Drawer\n\t\tBitmasking\n                Scriptable Objects\n        \n\n\n\n\n        Editor Scripting:\n        \n\n\nEditor scripting can be easy, only if you make it easy. Editor scripting is also incredibly powerful, but if you would like to keep the rest of the editor intact while modifying on property, use a property drawer instead. \nIn my own example, I keep the code super simple. I draw a warning, then I draw the regular editor inspector.\n\n\n\n        Attributes:\n        \n\n\nFrom hiding variables in the editor or using custom property drawers, there are many reasons to use attributes in Unity. In the code above I use an attribute and a custom property drawer to hide a property depending on an enum variables value.\nThe inspector when the attributes are applied:\n\n\n\n        Property Drawer:\n        \n\n\nProperty drawers in Unity are really useful if you need to change how one property is drawn. The code above looks absolutely insane, but all it does is get the value of an enum variable and disables the gui of the property if its value is passed to the attribute.\nThis is the product of the code:\n\n\n\n        Bitmasking:\n        \n\n\nThis certainly isn't the method of bitmasking you'd be expecting in Unity, but this is bit masking. This function finds the position of duplicate characters in a string. More documentation on the methodologies behind this function can be found here, written in Python3.\n\nWith the code:\nFindDuplicateChars.PrintList(&emsp;&emsp;FindDuplicateChars.FindDuplicateCharInString(\"tmpt\")&nbsp;);\nprints out this:\n\nThe reason the duplicate is found at 3 and not 4, is because strings are zero indexed.\n\n\n        Scriptable Objects:\n        \n\n\nTo create a scriptable object you need to add a CreateAssetMenu attribute above the ScriptableObject deriving class.\n\nThe GameManager above has a references to the scriptable object and prints to the console if the debug setting in the scriptable object is true.\nTo complete the reference, drag the scriptable object onto the pointer property in the inspector.\n\n\n\nScriptable objects are not typically edited because they are used as psuedo templates, but in my case it is being edited because the scriptable object holds setting data.","languages":null,"categories":["blog"],"tags":["GPE338","Unity","Game Programming"]},{"title":"Project 2&#58; Game Programming Essentials","permalink":"https://longestboi.github.io/2022/10/project-2-gpe338.html","link":"https://longestboi.github.io/2022/10/project-2-gpe338.html","date":"2022-10-30T00:00:00-07:00","modified":"2022-12-08T21:33:10-08:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<!-- Set the window title. Before, it had \"&#58\" as plaintext in the title. -->\n<script>window.top.document.title = \"Project 2\";</script>\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<style>\n\thead2{\n\t  color: var(--text-color-80);\n\t}\n\n\timg.imgUnderText{\n\t  margin-top: -2.5em !important;\n\t}\n\n\tbreak{\n\t  margin-bottom: 2.5em !important;\n\t}\n\n\t#quicklistfix::before{\n\t  content: \"2.\" !important;\n\t}\n</style>\n\n<!-- Header -->\n<div id=\"intro-head\">\n        <head1 style=\"text-align: center;\">Project 2</head1>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">This project, the first without a given title, was surprisingly easy. It did make me stretch a bit as I haven't embedded videos in HTML before. Did you know you have to have a video muted just for it to play? It doesn't even play if the video has no audio!</p>\n\n<!-- TOC -->\n<div class=\"toc\" style=\"\">\n        <div class=\"tocHead\">Contents:</div>\n        <hr class=\"line\" style=\"width: 100%;\" />\n        <ol>\n                <li><a href=\"#ljson\">Loading From JSON</a></li>\n                <li><a href=\"#lresource\">Loading From Resource Folder</a></li>\n                <li><a href=\"#uinterface\">Using Interfaces</a></li>\n                <li><a href=\"#unamespace\">Using Namespaces</a></li>\n                <li><a href=\"#getset\">Getters &amp; Setters</a></li>\n                <li><a href=\"#fouroopprinciples\">Four Principles of Object Oriented Programming</a></li>\n                <ol style=\"padding-left: 1em;\">\n\t\t\t<li><a href=\"#eanda\">Encapsulation &amp; Abstraction:</a></li>\n                \t<ol style=\"padding-left: 2em;\">\n\t\t\t\t<li><a href=\"#oopencapsulation\">Encapsulation</a></li>\n\t\t\t\t<li><a href=\"#oopabstraction\">Abstraction</a></li>\n\t\t\t</ol>\n                \t<li id=\"quicklistfix\"><a href=\"#iandp\">Inheritence &amp; Polymorphism:</a></li>\n                \t<ol style=\"padding-left: 2em;\">\n\t\t\t\t<li><a href=\"#oopinheritance\">Inheritence</a></li>\n                        \t<li><a href=\"#ooppolymorphism\">Polymorphism</a></li>\n\t\t\t</ol>\n\t\t</ol>\n        </ol>\n</div>\n<p></p>\n\n<!-- Loading From JSON -->\n<div id=\"ljson\" style=\"display: inline-block; \">\n        <head2>Loading From JSON:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Json Loader class in my loader namespace\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/JsonLoad.png\" /></p>\n<p class=\"indent\">For whatever reason, I couldn't get regular JSON loading through Unity's resource loader. So, I used bog standard C# functions.<br />To get JSON data from a file, call the <code>jsonLoad.GetJsonFromPaths()</code> function. <br />I've implemented this class like this in my playerSave class:</p>\n<p><img title=\"Demo code for Json Loader\" class=\"cImg codeImg imgUnderText\" src=\"/assets/img/Project 2/LoadingFromJson.png\" /></p>\n<p>Here is what the code looks like when running in the game:</p>\n<video title=\"Demo of demo code above\" class=\"backDrop center\" autoplay=\"\" loop=\"\" muted=\"\"><source src=\"/assets/img/Project 2/JSONSave.webm\" type=\"video/webm\" /></video>\n<break></break>\n\n<!-- Loading From Resources -->\n<div id=\"lresource\" style=\"display: inline-block; \">\n        <head2>Loading From Resource Folder:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Resource Loader class in my loader namespace\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/TextureLoad.png\" /></p>\n<p class=\"indent\">Loading assets from the resource folder is relatively easy. All you have to do is pass the path of the asset to the <code>Resources.Load</code> function. <br />Just remember that the path of the resources folder is relative to <code>Assets/Resources</code> in your Unity project. Also, don't pass the file extension with the file path.<br />My implementation uses the function above like so:</p>\n<p><img title=\"Demo code for Resource folder loading\" class=\"cImg codeImg imgUnderText\" src=\"/assets/img/Project 2/LoadFromResources.png\" /></p>\n<p>Here is what the code looks like when running in the game:</p>\n<video title=\"Demo of demo code above\" class=\"backDrop center\" autoplay=\"\" loop=\"\" muted=\"\"><source src=\"/assets/img/Project 2/TextureLoad.webm\" type=\"video/webm\" /></video>\n<break></break>\n<!-- Using Interfaces -->\n<div id=\"uinterface\" style=\"display: inline-block;\">\n        <head2>Using Interfaces:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Inventory item interface\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/Interface.png\" /></p>\n<p class=\"indent\">Interfaces are like classes in that they can be inherited. They are different in a few ways, though. Interfaces don't contain function definitions. Instead, they contain function declarations. The functions inherited have to be defined inside the inheriter.</p>\n\n<!-- Using Namespaces -->\n<div id=\"unamespace\" style=\"display: inline-block; \">\n        <head2>Using Namespaces:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Namespace example in my Unity project\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/namespace.png\" /></p>\n<p class=\"indent\">Namespaces allow you to import all of the classes inside the namespace into another C# script.</p>\n<p class=\"indent\">I've implemented namespaces to separate my loading functions and ordering them under specific classes.</p>\n\n<!-- Getters & Setters -->\n<div id=\"getset\" style=\"display: inline-block; \">\n        <head2>Getters &amp; Setters:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Getters and Setters in my playerSave struct\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/GetterAndSetter.png\" /></p>\n<p class=\"indent\">Getters and Setters are functions that <em>get</em> and <em>set</em> private variables.</p>\n<p class=\"indent\">I've used getters and setters to interact with a private variable when the programmer sets or gets a public variable.</p>\n<hr />\n\n<!-- Four principles -->\n<div id=\"fouroopprinciples\" style=\"display: inline-block;\">\n        <head1>Four Principals of<br />Object Oriented Programming</head1>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">I've seperated out two of the principles because because of the way I've implemented them.</p>\n\n<!-- E & A -->\n<div id=\"eanda\" style=\"display: inline-block;\">\n        <head1>Encapsulation &amp; Abstraction:</head1>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"An image representing 2/4 principals of OOP\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/OOPAbstraction.png\" /></p>\n\n<!-- OOP Encapsulation -->\n<div id=\"oopencapsulation\" style=\"display: inline-block; \">\n        <head2>Encapsulation:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Encapsulation is making variables public, private, or protected.</p>\n<p class=\"indent\">The way it's implemented here is pretty simplistic. I've made the text of the JSON file private, so anything outside the function can't modify it.</p>\n\n<!-- OOP Abstraction -->\n<div id=\"oopabstraction\" style=\"display: inline-block; \">\n        <head2>Abstraction:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Abstraction is the process of making private variables accessible through public functions.</p>\n<p class=\"indent\">The way I've implemented abstraction is a bit different than most examples. I've used a public variable and its getters and setters to interact with the private variables.</p>\n\n<!-- I & P -->\n<div id=\"iandp\" style=\"display: inline-block;\">\n        <head1>Inheritence &amp; Polymorphism:</head1>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"An image representing 2/4 principals of OOP\" class=\"cImg codeImg\" src=\"/assets/img/Project 2/OOP.png\" /></p>\n<p class=\"indent\"></p>\n\n<!-- OOP Inheritance -->\n<div id=\"oopinheritance\" style=\"display: inline-block; \">\n        <head2>Inheritence:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Inheritance is when you make a class derive from another class.<br />\nIt <em>inherits</em> <span class=\"underline-nh\" title=\"variables\">properties</span> and <span class=\"underline-nh\" title=\"functions\">methods</span> from the parent class.</p>\n<p class=\"indent\">My <code>FlashLight</code> class above inherits from my <code>item</code> class.<br />The <code>item</code> class provides variables like <code>itemName</code>, which stores the item name.</p>\n\n<!-- OOP Polymorphism -->\n<div id=\"ooppolymorphism\" style=\"display: inline-block; \">\n        <head2>Polymorphism:</head2>\n        <hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Polymorphism in <span class=\"underline-nh\" title=\"Object-oriented Programming\">OOP</span> is both overloading and overiding functions.</p>\n<p class=\"indent\">Overloading a function is when you make a function with the same name but give it different parameters. This is to give a single function multiple uses under the same function.</p>\n<p class=\"indent\">Overriding is used when a virtual function is defined in a parent class, and you need to change the function to conform to what the current class needs.</p>","excerpt":"Project 2\n        \n\nThis project, the first without a given title, was surprisingly easy. It did make me stretch a bit as I haven't embedded videos in HTML before. Did you know you have to have a video muted just for it to play? It doesn't even play if the video has no audio!\n\n\n\n        Contents:\n        \n        \n                Loading From JSON\n                Loading From Resource Folder\n                Using Interfaces\n                Using Namespaces\n                Getters &amp; Setters\n                Four Principles of Object Oriented Programming\n                \n\t\t\tEncapsulation &amp; Abstraction:\n                \t\n\t\t\t\tEncapsulation\n\t\t\t\tAbstraction\n\t\t\t\n                \tInheritence &amp; Polymorphism:\n                \t\n\t\t\t\tInheritence\n                        \tPolymorphism\n\t\t\t\n\t\t\n        \n\n\n\n\n\n        Loading From JSON:\n        \n\n\nFor whatever reason, I couldn't get regular JSON loading through Unity's resource loader. So, I used bog standard C# functions.To get JSON data from a file, call the jsonLoad.GetJsonFromPaths() function. I've implemented this class like this in my playerSave class:\n\nHere is what the code looks like when running in the game:\n\n\n\n\n\n        Loading From Resource Folder:\n        \n\n\nLoading assets from the resource folder is relatively easy. All you have to do is pass the path of the asset to the Resources.Load function. Just remember that the path of the resources folder is relative to Assets/Resources in your Unity project. Also, don't pass the file extension with the file path.My implementation uses the function above like so:\n\nHere is what the code looks like when running in the game:\n\n\n\n\n        Using Interfaces:\n        \n\n\nInterfaces are like classes in that they can be inherited. They are different in a few ways, though. Interfaces don't contain function definitions. Instead, they contain function declarations. The functions inherited have to be defined inside the inheriter.\n\n\n\n        Using Namespaces:\n        \n\n\nNamespaces allow you to import all of the classes inside the namespace into another C# script.\nI've implemented namespaces to separate my loading functions and ordering them under specific classes.\n\n\n\n        Getters &amp; Setters:\n        \n\n\nGetters and Setters are functions that get and set private variables.\nI've used getters and setters to interact with a private variable when the programmer sets or gets a public variable.\n\n\n\n\n        Four Principals ofObject Oriented Programming\n        \n\nI've seperated out two of the principles because because of the way I've implemented them.\n\n\n\n        Encapsulation &amp; Abstraction:\n        \n\n\n\n\n\n        Encapsulation:\n        \n\nEncapsulation is making variables public, private, or protected.\nThe way it's implemented here is pretty simplistic. I've made the text of the JSON file private, so anything outside the function can't modify it.\n\n\n\n        Abstraction:\n        \n\nAbstraction is the process of making private variables accessible through public functions.\nThe way I've implemented abstraction is a bit different than most examples. I've used a public variable and its getters and setters to interact with the private variables.\n\n\n\n        Inheritence &amp; Polymorphism:\n        \n\n\n\n\n\n\n        Inheritence:\n        \n\nInheritance is when you make a class derive from another class.\nIt inherits properties and methods from the parent class.\nMy FlashLight class above inherits from my item class.The item class provides variables like itemName, which stores the item name.\n\n\n\n        Polymorphism:\n        \n\nPolymorphism in OOP is both overloading and overiding functions.\nOverloading a function is when you make a function with the same name but give it different parameters. This is to give a single function multiple uses under the same function.\nOverriding is used when a virtual function is defined in a parent class, and you need to change the function to conform to what the current class needs.","languages":null,"categories":["blog"],"tags":["GPE338","Unity","Game Programming"]},{"title":"3 Blog Post For ENG301","permalink":"https://longestboi.github.io/2022/10/eng301-3-blog-posts.html","link":"https://longestboi.github.io/2022/10/eng301-3-blog-posts.html","date":"2022-10-09T00:00:00-07:00","modified":"2022-10-09T21:01:30-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<link rel=\"stylesheet\" href=\"/assets/pcss/blogSummary.css\" />\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<div id=\"intro-head\">\n\t<head1 style=\"text-align: center;\">3 Blog Posts Landing Page</head1>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">This notes post is to corral the three individual blog posts I need to submit for an assignment.</p>\n<p></p>\n<break></break>\n\n<div style=\"display: block;\">\n <div id=\"three-blog-posts\" style=\"display: inline-block;\">\n  <head2>The 3 Blog Posts:</head2>\n  <hr class=\"line\" style=\"width: 100%;\" />\n </div>\n</div>\n\n<div class=\"post-header\">\n   <a><!-- List snippets -->\n\n<!-- Dynamic link color based on post color scheme -->\n\n\n<!-- Dynamic background color based on post color scheme -->\n\n\n<section class=\"new-list\">\n  <a>\n    <!-- Item title -->\n    <a class=\"blog-posts\" href=\"/2022/10/studying-game-industry-infographic.html\">Studying an Infographic About the Games Industry</a>\n\n    <!-- External link indicator -->\n    \n  </a>\n</section>\n</a>\n   <div class=\"dateAndTag\">\n     <span class=\"date\">⌜2022-10-09⌟</span>\n     <span class=\"tags\">Tags:\n     \n     <a href=\"/_pages/sort-by-tags.html#eng301\" class=\"sub-tags\" style=\"text-decoration: none;\">#ENG301</a>\n     \n     <a href=\"/_pages/sort-by-tags.html#technical-writing\" class=\"sub-tags\" style=\"text-decoration: none;\">#Technical Writing</a>\n     \n     </span>\n   </div>\n   </div>\n<div class=\"excerpt\">\n    <p>Infographic about the Games industry Finding an infographic about the part of the games industry I am going into was challenging. So challenging I could not find one. So, I have chosen a more generic infographic to analyze. Attributions: The EAS Analysis of the infographic: The average age of the...</p>\n   </div>\n\n<div class=\"post-header\">\n   <a><!-- List snippets -->\n\n<!-- Dynamic link color based on post color scheme -->\n\n\n<!-- Dynamic background color based on post color scheme -->\n\n\n<section class=\"new-list\">\n  <a>\n    <!-- Item title -->\n    <a class=\"blog-posts\" href=\"/2022/10/how-to-gain-employment-in-games-programming.html\">How to Gain Employment in Games Programming</a>\n\n    <!-- External link indicator -->\n    \n  </a>\n</section>\n</a>\n   <div class=\"dateAndTag\">\n     <span class=\"date\">⌜2022-10-09⌟</span>\n     <span class=\"tags\">Tags:\n     \n     <a href=\"/_pages/sort-by-tags.html#eng301\" class=\"sub-tags\" style=\"text-decoration: none;\">#ENG301</a>\n     \n     <a href=\"/_pages/sort-by-tags.html#technical-writing\" class=\"sub-tags\" style=\"text-decoration: none;\">#Technical Writing</a>\n     \n     </span>\n   </div>\n   </div>\n<div class=\"excerpt\">\n    <p>Gaining Employment in Games Programming Gaining employment in the game programming industry can be tricky. A degree in game programming often makes it easier for you to get hired in the game industry. That is because the degree effectively vouches for you. If you are not college educated, the likelihood...</p>\n   </div>\n\n<div class=\"post-header\">\n   <a><!-- List snippets -->\n\n<!-- Dynamic link color based on post color scheme -->\n\n\n<!-- Dynamic background color based on post color scheme -->\n\n\n<section class=\"new-list\">\n  <a>\n    <!-- Item title -->\n    <a class=\"blog-posts\" href=\"/2022/10/a-day-in-the-life-video.html\">A Day in the Life of a Game Programmer Video</a>\n\n    <!-- External link indicator -->\n    \n  </a>\n</section>\n</a>\n   <div class=\"dateAndTag\">\n     <span class=\"date\">⌜2022-10-09⌟</span>\n     <span class=\"tags\">Tags:\n     \n     <a href=\"/_pages/sort-by-tags.html#eng301\" class=\"sub-tags\" style=\"text-decoration: none;\">#ENG301</a>\n     \n     <a href=\"/_pages/sort-by-tags.html#technical-writing\" class=\"sub-tags\" style=\"text-decoration: none;\">#Technical Writing</a>\n     \n     </span>\n   </div>\n   </div>\n<div class=\"excerpt\">\n    <p>A Day in the Life of a Game Programmer While I could have found a video about a day in the life of an American game developer, I have already seen \"Day in the Life of a Japanese Game Programmer,\" so I would like to introduce this video to you....</p>\n   </div>","excerpt":"3 Blog Posts Landing Page\n\t\n\nThis notes post is to corral the three individual blog posts I need to submit for an assignment.\n\n\n\n\n \n  The 3 Blog Posts:\n  \n \n\n\n\n   \n\n\n\n\n\n\n\n\n  \n    \n    Studying an Infographic About the Games Industry\n\n    \n    \n  \n\n\n   \n     ⌜2022-10-09⌟\n     Tags:\n     \n     #ENG301\n     \n     #Technical Writing\n     \n     \n   \n   \n\n    Infographic about the Games industry Finding an infographic about the part of the games industry I am going into was challenging. So challenging I could not find one. So, I have chosen a more generic infographic to analyze. Attributions: The EAS Analysis of the infographic: The average age of the...\n   \n\n\n   \n\n\n\n\n\n\n\n\n  \n    \n    How to Gain Employment in Games Programming\n\n    \n    \n  \n\n\n   \n     ⌜2022-10-09⌟\n     Tags:\n     \n     #ENG301\n     \n     #Technical Writing\n     \n     \n   \n   \n\n    Gaining Employment in Games Programming Gaining employment in the game programming industry can be tricky. A degree in game programming often makes it easier for you to get hired in the game industry. That is because the degree effectively vouches for you. If you are not college educated, the likelihood...\n   \n\n\n   \n\n\n\n\n\n\n\n\n  \n    \n    A Day in the Life of a Game Programmer Video\n\n    \n    \n  \n\n\n   \n     ⌜2022-10-09⌟\n     Tags:\n     \n     #ENG301\n     \n     #Technical Writing\n     \n     \n   \n   \n\n    A Day in the Life of a Game Programmer While I could have found a video about a day in the life of an American game developer, I have already seen \"Day in the Life of a Japanese Game Programmer,\" so I would like to introduce this video to you....","languages":null,"categories":["note"],"tags":["ENG301","Technical Writing"]},{"title":"Studying an Infographic About the Games Industry","permalink":"https://longestboi.github.io/2022/10/studying-game-industry-infographic.html","link":"https://longestboi.github.io/2022/10/studying-game-industry-infographic.html","date":"2022-10-09T00:00:00-07:00","modified":"2022-10-23T12:58:22-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<!-- Head of the post -->\n<div id=\"intro-head\">\n\t<head1 style=\"text-align: center;\">Infographic about the Games industry</head1>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">Finding an infographic about the part of the games industry I am going into was challenging. So challenging I could not find one. So, I have chosen a more generic infographic to analyze.</p>\n\n<!-- Infographic -->\n<div>\n <div>\n  <img class=\"cImg\" title=\"Infographic about the affect of games on the general public\" style=\"width: 100%; margin-bottom: 0em;\" src=\"https://www.theesa.com/wp-content/uploads/2021/07/Final-EF-Infographic.png\" />\n </div>\n <div>\n  <span class=\"citation-nh\" style=\"display: inline;\">Attributions: </span>\n  <a class=\"citation\" target=\"_blank\" href=\"https://www.theesa.com/resource/2021-essential-facts-about-the-video-game-industry/\">The EAS</a>\n </div>\n</div>\n\n<!-- Analysis -->\n<div style=\"display: block;\">\n <div id=\"analysis\" style=\"display: inline-block;\">\n  <head2>Analysis of the infographic:</head2>\n  <hr class=\"line\" style=\"width: 100%;\" />\n </div>\n</div>\n\n<p class=\"indent\">The average age of the games consumer, according to the figure above, is 31 years old; This can be important when you are developing a game as some aspects of the game may not be captivating to that audience. Of course, nobody says you have to target the average video game player.</p>\n<p class=\"indent\">An interesting thing that many may not seem important is that 45 percent of all players identify as female; This, to me, is interesting as games are, generally, not targeted toward women, and if they are, they are for small children.</p>\n<p class=\"indent\">Though targeting games toward women would likely backfire, as it could many would see it as pandering, many women do not play games that use this sort of targeting.</p>","excerpt":"Infographic about the Games industry\n\t\n\nFinding an infographic about the part of the games industry I am going into was challenging. So challenging I could not find one. So, I have chosen a more generic infographic to analyze.\n\n\n\n \n  \n \n \n  Attributions: \n  The EAS\n \n\n\n\n\n \n  Analysis of the infographic:\n  \n \n\n\nThe average age of the games consumer, according to the figure above, is 31 years old; This can be important when you are developing a game as some aspects of the game may not be captivating to that audience. Of course, nobody says you have to target the average video game player.\nAn interesting thing that many may not seem important is that 45 percent of all players identify as female; This, to me, is interesting as games are, generally, not targeted toward women, and if they are, they are for small children.\nThough targeting games toward women would likely backfire, as it could many would see it as pandering, many women do not play games that use this sort of targeting.","languages":null,"categories":["blog"],"tags":["ENG301","Technical Writing"]},{"title":"How to Gain Employment in Games Programming","permalink":"https://longestboi.github.io/2022/10/how-to-gain-employment-in-games-programming.html","link":"https://longestboi.github.io/2022/10/how-to-gain-employment-in-games-programming.html","date":"2022-10-09T00:00:00-07:00","modified":"2022-10-09T23:34:38-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<div id=\"intro-head\">\n\t<head1 style=\"text-align: center; font-size: 150%;\">Gaining Employment in Games Programming</head1>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p class=\"indent\">Gaining employment in the game programming industry can be tricky. A degree in game programming often makes it easier for you to get hired in the game industry. That is because the degree effectively vouches for you.</p>\n\n<p class=\"indent\">If you are not college educated, the likelihood of getting a job decreases dramatically, and the only way to get past this is to have released games under your belt.</p>\n\n<div>\n <img class=\"cImg\" title=\"A graph of unemployment rates and and weekley earnings of education levels\" style=\"width: 100%; margin-bottom: 0em;\" src=\"http://frontrangeblog.wpengine.com/wp-content/uploads/2011/08/education-pays.gif\" />\n</div>\n\n<div>\n <span class=\"citation-nh\" style=\"display: inline;\">Attributions: </span>\n <a class=\"citation\" target=\"_blank\" href=\"https://blog.frontrange.edu/2013/01/07/is-a-college-education-really-worth-it/\">Front Range EDUs blog</a>\n</div>\n\n<!-- With College Degree -->\n<div style=\"display: block;\">\n <div id=\"analysis\" style=\"display: inline-block;\">\n  <head2>With College Degree:</head2>\n  <hr class=\"line\" style=\"width: 100%;\" />\n </div>\n</div>\n<p class=\"indent\">With a college degree, people are more likely to assume your accreditations. Typically, though, graduating from colleges that offer game programming degrees, you need to make a game. And you are more likely to get hired if you have a higher number of polished games on your resume.</p>\n\n<!-- Without College Degree -->\n<div style=\"display: block;\">\n <div id=\"analysis\" style=\"display: inline-block;\">\n  <head2>Without College Degree:</head2>\n  <hr class=\"line\" style=\"width: 100%;\" />\n </div>\n</div>\n<p class=\"indent\">Without a college degree, it is a requirement to have made more polished games or hope your game gets incredibly popular. More recently, however, the focus of game consumers has shifted to indie games. And from what some professors at <span title=\"University of Advancing Technology\" class=\"underline-nh\">UAT</span> have said, working in indie games, then going to the industry is relatively common today.</p>","excerpt":"Gaining Employment in Games Programming\n\t\n\n\nGaining employment in the game programming industry can be tricky. A degree in game programming often makes it easier for you to get hired in the game industry. That is because the degree effectively vouches for you.\n\nIf you are not college educated, the likelihood of getting a job decreases dramatically, and the only way to get past this is to have released games under your belt.\n\n\n \n\n\n\n Attributions: \n Front Range EDUs blog\n\n\n\n\n \n  With College Degree:\n  \n \n\nWith a college degree, people are more likely to assume your accreditations. Typically, though, graduating from colleges that offer game programming degrees, you need to make a game. And you are more likely to get hired if you have a higher number of polished games on your resume.\n\n\n\n \n  Without College Degree:\n  \n \n\nWithout a college degree, it is a requirement to have made more polished games or hope your game gets incredibly popular. More recently, however, the focus of game consumers has shifted to indie games. And from what some professors at UAT have said, working in indie games, then going to the industry is relatively common today.","languages":null,"categories":["blog"],"tags":["ENG301","Technical Writing"]},{"title":"A Day in the Life of a Game Programmer Video","permalink":"https://longestboi.github.io/2022/10/a-day-in-the-life-video.html","link":"https://longestboi.github.io/2022/10/a-day-in-the-life-video.html","date":"2022-10-09T00:00:00-07:00","modified":"2022-10-09T23:35:42-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<div id=\"intro-head\">\n\t<head1 style=\"text-align: center; font-size: 160%;\">A Day in the Life of a Game Programmer</head1>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">While I could have found a video about a day in the life of an American game developer, I have already seen \"Day in the Life of a Japanese Game Programmer,\" so I would like to introduce this video to you.</p>\n<p class=\"indent\">The video goes through many things that aren't video game industry-related, but regardless, it shows that video game programmers are normal people.</p>\n\n<div>\n\t<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/e_TxH59MclA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>","excerpt":"A Day in the Life of a Game Programmer\n\t\n\nWhile I could have found a video about a day in the life of an American game developer, I have already seen \"Day in the Life of a Japanese Game Programmer,\" so I would like to introduce this video to you.\nThe video goes through many things that aren't video game industry-related, but regardless, it shows that video game programmers are normal people.","languages":null,"categories":["blog"],"tags":["ENG301","Technical Writing"]},{"title":"Project 1&#58; Functions","permalink":"https://longestboi.github.io/2022/10/project-1-functions.html","link":"https://longestboi.github.io/2022/10/project-1-functions.html","date":"2022-10-09T00:00:00-07:00","modified":"2022-10-09T15:41:03-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<script>window.top.document.title = \"Project 1: Functions\";</script>\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<head1 style=\"text-align: center;\">Project 1 Teachback</head1>\n<hr class=\"line\" />\n\n<p>In this post, I'll be going over some C# and Unity concepts and expanding on how they are utilized and how I have used them.</p>\n<p>I won't be providing the source code to my project, but there will be screenshots of the code and the output of that code when applicable.</p>\n<div class=\"toc\" style=\"\">\n\t<div class=\"tocHead\">Contents:</div>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n\t<ol>\n\t\t<li><a href=\"#coroutines\">Coroutines</a></li>\n\t\t<li><a href=\"#delegates\">Delegates</a></li>\n\t\t<li><a href=\"#lambdas\">Lambdas</a></li>\n\t\t<li><a href=\"#generics\">Generics</a></li>\n\t\t<li><a href=\"#multithreading\">Multithreading</a></li>\n\t\t<li><a href=\"#conclusion\">Conclusion</a></li>\n\t</ol>\n\t\n</div>\n<break></break>\n\n<div id=\"coroutines\" style=\"display: inline-block; \">\n\t<head2>Coroutines:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Coroutines in Unity project\" class=\"cImg\" style=\"width: 100% !important; margin-top: -1em !important; margin-bottom: -1em !important;\" src=\"/assets/img/Project 1 - functions/Coroutine.png\" /></p>\n\n<div style=\"display: inline-block;\">\n\t<head3>What's a coroutine?</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>A coroutine is a way of spreading tasks across multiple frames. It functions similarly to the <code>Update()</code> function provided by MonoBehaviour in that they execute code on individual frames.<br />They are different, however. You can run code across as many frames as you need with coroutines. </p>\n<p>My code above runs like the <code>Update()</code>, so it's not very complex.</p>\n<div style=\"display: inline-block;\">\n\t<head3>let's walk through the code:</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>The way I use coroutines is needlessly complex, but it works!</p>\n<p>In the <code>Start()</code> function, I set my <code>IEnumerator inputCoroutine</code> equal to a reference to the <code>WaitForInput()</code> function.</p>\n<p>Inside the <code>WaitForInput()</code> function is an infinite while loop that returns with <code>yield return null</code>, which will continue code execution on the next frame.</p>\n<p>The rest of the function unsets the input of the previous frame, then scans the held inputs, and then sets the inputs again. </p>\n\n<div id=\"delegates\" style=\"display: inline-block;\">\n\t<head2>Delegates:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Demonstration of a delegate in Unity\" class=\"cImg\" style=\"width: 100% !important; margin-top: -1em !important; margin-bottom: -1em !important;\" src=\"/assets/img/Project 1 - functions/Delegate.png\" /></p>\n<div style=\"display: inline-block;\">\n\t<head3>What's a delegate?</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>A delegate is a type that holds a reference to a function. A delegate can have multiple functions appended to it as well. The function references in a delegate execute from the top down</p>\n<div style=\"display: inline-block;\">\n\t<head3>let's walk through the code:</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>My usage of delegates is a bit pitiful, but it works as a decent demonstration.</p>\n<p>The <code>onUse</code> delegate is defined as <code>delegate void onUse();</code>, sso the functions we want to cast to the delegate have to return nothing and take no arguments. As you can see, my <code>Error()</code> &amp; <code>LaterUpdate()</code> functions adhere to the delegate definition, so they can be cast to the <code>useFlashLight</code> delegate.</p>\n<p>My functions in the delegate are simple. All they do is print to the Unity console. This is why I called my demonstration pitiful, as delegates are much more powerful than what I'm using them for.</p>\n<p>The output of the delegate to the Unity console looks like this:</p>\n<p><img title=\"output of the delegate to the Unity console\" class=\"cImg\" style=\"width: 70%;\" src=\"/assets/img/Project 1 - functions/Output-from-the-Delgate.png\" /></p>\n\n<div id=\"lambdas\" style=\"display: inline-block;\">\n\t<head2>Lambdas:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Lambda being used as a compare function\" class=\"cImg\" style=\"width: 100% !important; margin-top: -1em !important; margin-bottom: -1em !important;\" src=\"/assets/img/Project 1 - functions/Lambda.png\" /></p>\n\n<div style=\"display: inline-block;\">\n\t<head3>What are lambdas?</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>Lambda functions can be super helpful in many different ways. Do you need a comparison function but don't want to write tons of functions you'll never use again? Do you have identical lines of code in multiple switch statement cases?</p>\n<p>Well, you should be using lambdas!</p>\n<p>Lambda functions are anonymous, meaning the lambda can not be called outside the function the lambda is defined in.</p>\n\n<div style=\"display: inline-block;\">\n\t<head3>let's walk through the code:</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>In the code above, you can see a list of <code>IinventoryItems</code> named <code>inventorySpace</code>. The function <code>SortInvetory()</code> takes an enum of the sorting method, then a switch statement jumps to the method used. In those switch cases, they call the <code>Sort</code> method of the list object. The sort method takes a function as an argument, so this is where we use the lambda function.</p>\n<p>My lambda functions take two arguments, <code>a</code> &amp; <code>b</code>, the variables to be compared.</p>\n<p>In the name sorting lambda, I compare the first char of both compared variables.</p>\n<p>In the amount sorting lambda, I compare the number of items in the inventory slots passed to the lambda.</p>\n\n<div id=\"generics\" style=\"display: inline-block;\">\n\t<head2>Generics:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Premade Generic in Unity\" class=\"cImg\" style=\"width: 100% !important; margin-top: -1em !important; margin-bottom: -1em !important;\" src=\"/assets/img/Project 1 - functions/Generics.png\" /></p>\n\n<div style=\"display: inline-block;\">\n\t<head3>What's a generic?</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>A generic is a way to get a compiler to generate code to conform to the passed data type.</p>\n<p>Generics in Unity can be incredibly useful. Do you want to add two numbers together? But you don't want to write hundreds of functions that handle each data type you want to add together?</p>\n<p>Use generics to make the compiler do that for you!</p>\n<p>I personally have no use for generics in my game yet, so I'll be demonstrating the use of premade generics in my code walkthrough.</p>\n\n<div style=\"display: inline-block;\">\n\t<head3>let's walk through the code:</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>The list of objects with an <code>IInventoryItem</code> interface uses generics to store said objects.</p>\n<p>The way it does this is that the compiler makes a new version of the List object that conforms to the <code>IInventoryItem</code> interface.</p>\n\n<div id=\"multithreading\" style=\"display: inline-block;\">\n\t<head2>Multithreading:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p><img title=\"Demonstration of multithreading in Unity\" class=\"cImg\" style=\"width: 100% !important; margin-top: -1em !important; margin-bottom: -1em !important;\" src=\"/assets/img/Project 1 - functions/Multithreading.png\" />\n<br /></p>\n\n<div style=\"display: inline-block;\">\n\t<head3>What's Multithreading?</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p>Multithreading is running code <span class=\"underline-nh\" title=\"at the same time, dividing the task between threads\">concurrently\t</span> or in <span class=\"underline-nh\" title=\"simultaniously\">parallel</span> on a <span class=\"underline-nh\" title=\"Central Processing Unit\">CPU</span>.</p>\n<p>Multithreading in Unity is a bit tricky. The Unity API is not thread-safe, meaning you can't use <code>RigidBody</code>, <code title=\"The Unity API version of Vec3, anyway\">Vector3</code>, or the <code title=\"Again, the Unity API version\">Debug</code> namespace.</p>\n<p>This is a massive detriment and limits the use of threads in Unity. With a cursory look around the internet, I only found a few usages for threads in Unity. Some include AI, pathfinding, and file operations; Out of the three, I could see file operations usage as the most useful.</p>\n\n<div style=\"display: inline-block;\">\n\t<head3>let's walk through the code:</head3>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>In the <code>Start()</code> function, we start by making a new thread that take\ts <code>ThreadFunction()</code> as an argument, then I start the thread.</p>\n<p>In the <code>ThreadFunction()</code>, I put a lock on the code to ensure the function cannot be run on a separate thread without the thread already executing the code if it has yet to return. The while loop runs forever, checking if <code>counter</code> is equal to 1000 and setting <code>counter</code> to 0 if <code>counter</code> is. Incrementing count then waiting 1 millisecond.</p>\n<p>Here is what <code>counter</code> looks like in the Unity editor:</p>\n<p><img title=\"Choppy, low-quality gif of count incrementing to 1000 in one second\" class=\"cImg\" style=\"width: 40%;\" src=\"/assets/img/Project 1 - functions/MultiThreadTest.gif\" /></p>\n\n<div id=\"conclusion\" style=\"display: inline-block;\">\n\t<head2>Conclusion:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p>It's my first time writing something of this style, and I think I did, at best, ok.</p>\n<p>It was rushed, the stylings hard to read, and the single GIF on this page is poor quality. I can't say much more other than I hope I can do better on project 2 teach back.</p>","excerpt":"Project 1 Teachback\n\n\nIn this post, I'll be going over some C# and Unity concepts and expanding on how they are utilized and how I have used them.\nI won't be providing the source code to my project, but there will be screenshots of the code and the output of that code when applicable.\n\n\tContents:\n\t\n\t\n\t\tCoroutines\n\t\tDelegates\n\t\tLambdas\n\t\tGenerics\n\t\tMultithreading\n\t\tConclusion\n\t\n\t\n\n\n\n\n\tCoroutines:\n\t\n\n\n\n\n\tWhat's a coroutine?\n\t\n\nA coroutine is a way of spreading tasks across multiple frames. It functions similarly to the Update() function provided by MonoBehaviour in that they execute code on individual frames.They are different, however. You can run code across as many frames as you need with coroutines. \nMy code above runs like the Update(), so it's not very complex.\n\n\tlet's walk through the code:\n\t\n\nThe way I use coroutines is needlessly complex, but it works!\nIn the Start() function, I set my IEnumerator inputCoroutine equal to a reference to the WaitForInput() function.\nInside the WaitForInput() function is an infinite while loop that returns with yield return null, which will continue code execution on the next frame.\nThe rest of the function unsets the input of the previous frame, then scans the held inputs, and then sets the inputs again. \n\n\n\tDelegates:\n\t\n\n\n\n\tWhat's a delegate?\n\t\n\nA delegate is a type that holds a reference to a function. A delegate can have multiple functions appended to it as well. The function references in a delegate execute from the top down\n\n\tlet's walk through the code:\n\t\n\nMy usage of delegates is a bit pitiful, but it works as a decent demonstration.\nThe onUse delegate is defined as delegate void onUse();, sso the functions we want to cast to the delegate have to return nothing and take no arguments. As you can see, my Error() &amp; LaterUpdate() functions adhere to the delegate definition, so they can be cast to the useFlashLight delegate.\nMy functions in the delegate are simple. All they do is print to the Unity console. This is why I called my demonstration pitiful, as delegates are much more powerful than what I'm using them for.\nThe output of the delegate to the Unity console looks like this:\n\n\n\n\tLambdas:\n\t\n\n\n\n\n\tWhat are lambdas?\n\t\n\nLambda functions can be super helpful in many different ways. Do you need a comparison function but don't want to write tons of functions you'll never use again? Do you have identical lines of code in multiple switch statement cases?\nWell, you should be using lambdas!\nLambda functions are anonymous, meaning the lambda can not be called outside the function the lambda is defined in.\n\n\n\tlet's walk through the code:\n\t\n\nIn the code above, you can see a list of IinventoryItems named inventorySpace. The function SortInvetory() takes an enum of the sorting method, then a switch statement jumps to the method used. In those switch cases, they call the Sort method of the list object. The sort method takes a function as an argument, so this is where we use the lambda function.\nMy lambda functions take two arguments, a &amp; b, the variables to be compared.\nIn the name sorting lambda, I compare the first char of both compared variables.\nIn the amount sorting lambda, I compare the number of items in the inventory slots passed to the lambda.\n\n\n\tGenerics:\n\t\n\n\n\n\n\tWhat's a generic?\n\t\n\nA generic is a way to get a compiler to generate code to conform to the passed data type.\nGenerics in Unity can be incredibly useful. Do you want to add two numbers together? But you don't want to write hundreds of functions that handle each data type you want to add together?\nUse generics to make the compiler do that for you!\nI personally have no use for generics in my game yet, so I'll be demonstrating the use of premade generics in my code walkthrough.\n\n\n\tlet's walk through the code:\n\t\n\nThe list of objects with an IInventoryItem interface uses generics to store said objects.\nThe way it does this is that the compiler makes a new version of the List object that conforms to the IInventoryItem interface.\n\n\n\tMultithreading:\n\t\n\n\n\n\n\n\tWhat's Multithreading?\n\t\n\n\nMultithreading is running code concurrently\t or in parallel on a CPU.\nMultithreading in Unity is a bit tricky. The Unity API is not thread-safe, meaning you can't use RigidBody, Vector3, or the Debug namespace.\nThis is a massive detriment and limits the use of threads in Unity. With a cursory look around the internet, I only found a few usages for threads in Unity. Some include AI, pathfinding, and file operations; Out of the three, I could see file operations usage as the most useful.\n\n\n\tlet's walk through the code:\n\t\n\nIn the Start() function, we start by making a new thread that take\ts ThreadFunction() as an argument, then I start the thread.\nIn the ThreadFunction(), I put a lock on the code to ensure the function cannot be run on a separate thread without the thread already executing the code if it has yet to return. The while loop runs forever, checking if counter is equal to 1000 and setting counter to 0 if counter is. Incrementing count then waiting 1 millisecond.\nHere is what counter looks like in the Unity editor:\n\n\n\n\tConclusion:\n\t\n\nIt's my first time writing something of this style, and I think I did, at best, ok.\nIt was rushed, the stylings hard to read, and the single GIF on this page is poor quality. I can't say much more other than I hope I can do better on project 2 teach back.","languages":null,"categories":["blog"],"tags":["GPE338","Unity","Game Programming"]},{"title":"Project 1&#58; Engine Basics Teachback","permalink":"https://longestboi.github.io/2022/09/project-1-engine-basics-teachback.html","link":"https://longestboi.github.io/2022/09/project-1-engine-basics-teachback.html","date":"2022-09-25T00:00:00-07:00","modified":"2022-09-25T23:36:35-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<script>window.top.document.title = \"Project 1: Engine Basics Teachback\";</script>\n\n<link rel=\"stylesheet\" href=\"/assets/pcss/classwork.css\" />\n\n<div id=\"intro-head\">\n\t<head1 style=\"text-align: center;\">The Basic Setup of Unity VR on Linux</head1>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p><img title=\"Unity Logo\" class=\"cImg\" style=\"width: 60% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/logo-unity-web.png\" /></p>\n<p class=\"indent\">\nGetting Unity up and running on Linux is incredibly easy. To start, we'll install Unity Hub &amp; Unity. Next, we'll import libraries and settings for VR. After that, we'll import an art asset into our scene. Lastly, we'll import &amp; activate VR controls which will allow the player to look around our scene. So let's get started!\n</p>\n<break></break>\n\n<div class=\"toc\">\n\t<div class=\"tocHead\">Contents:</div>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n\t<ol>\n\t\t<li><a href=\"#install\">Installing Unity on Linux</a></li>\n\t\t<li><a href=\"#create\">Creating a new project</a></li>\n\t\t<li><a href=\"#import\">Importing assets into your project</a></li>\n\t\t<li><a href=\"#conclusion\">Conclusion</a></li>\n\t</ol>\n</div>\n<break></break>\n\n<div id=\"install\" style=\"display: inline-block;\">\n\t<head2>Installing Unity on Linux:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n<p class=\"indent\">\nTo start, you'll want to install Unity Hub. \nIt can be installed in a few ways. You can run the Unity Hub from an appimage by going to \n<a class=\"underline\" href=\"https://unity3d.com/get-unity/download\">Unity3D.com,</a> \nclicking download Unity Hub, then running: <br /><code>./unityhub.appimage</code> in the directory of the appimage.</p>\n<p>The other way of installing Unity Hub is through a package manager.</p>\n<p>On Ubuntu run this line to add the Unity Hub repository:\n\t<code style=\"display: block;\">\n\t\t<unselect>$ </unselect>sudo sh -c 'echo \"deb https://hub.unity3d.com/linux/repos/deb stable main\" &gt; /etc/apt/sources.list.d/unityhub.list'\n\t</code>\n\tthen, add the public key with:\n\t<code style=\"display: block;\">\n\t\t<unselect>$ </unselect>wget -qO - https://hub.unity3d.com/linux/keys/public | sudo apt-key add -\n\t</code>\n\tnow, update your package cache and install the package:\n\t<code style=\"display: block;\">\n\t\t<unselect>$ </unselect>sudo apt update<br />\n\t\t<unselect>$ </unselect>sudo apt-get install unityhub\n\t</code>\n\tIf you are on any other Linux distro besides Debian based ones, refer to the \n\t<a class=\"underline\" href=\"https://docs.unity3d.com/hub/manual/InstallHub.html#install-hub-linux\">Unity3D docs</a>.\n</p>\n<break></break>\n\n<div id=\"create\" style=\"display: inline-block;\">\n\t<head2>Creating a new project:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p><img title=\"Unity's New projects page.\" class=\"cImg\" style=\"width: 100% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/unity-new-project-page.png\" /></p>\n<p class=\"indent\">It's super simple to create a new project in Unity. Open the Unity Hub and under the projects tab on the left side, click the blue \"New Project\" button.</p>\n<p><img title=\"Creating a new project in Unity.\" class=\"cImg\" style=\"width: 100% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/unity-create-project-page.png\" /></p>\n<p class=\"indent\">Once your in the New project dialog, scroll down to VR and click on it, click \"Download template\", change the project name, and finally, click the \"Create project\" button!</p>\n<break></break>\n\n<div id=\"import\" style=\"display: inline-block;\">\n\t<head2>Importing assets into your project:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p><img title=\"New unity project in the editor\" class=\"cImg\" style=\"width: 100% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/new-unity-project-editor.png\" /></p>\n\n<p class=\"indent\">Importing assets into your project is also incredibly easy. To start make a folder for your textures named <code>Textures</code>. Then, get the texture you want to import and drag it into the newly created folder.</p>\n<p class=\"indent\">The texture I'll be importing is one that I made a while ago. The texture is one of the tiles in my old dorm room.</p>\n<p><img title=\"Beige_Tile.jpg\" class=\"cImg\" style=\"width: 50% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/Beige_Tile.jpg\" /></p>\n\n<p>When following the instructions above I get this:<img title=\"Beige_Tile.jpg successfully imported into Unity!\" class=\"cImg\" style=\"width: 100% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/unity-succsessful-texture-import.png\" />Our texture was successfully imported into Unity!</p>\n\n<p>Now, to use it, drag it onto the \"plane\" object in either the heirarchy or scene window.<br />Then you get:<img title=\"Beige_Tile.jpg Texture succsessfully applied to the plane object!\" class=\"cImg\" style=\"width: 100% !important;\" src=\"/assets/img/Project 1 - engine basics teachback/unity-succsessful-texture-application.png\" /></p>\n<p>Our imported texture is now applied to the plane! To get modify how it looks on the plane, select the plane object. Then in the inspector window, click on the material drop down.</p>\n<break></break>\n\n<div id=\"conclusion\" style=\"display: inline-block;\">\n\t<head2>Conclusion:</head2>\n\t<hr class=\"line\" style=\"width: 100%;\" />\n</div>\n\n<p class=\"indent\">After all of that, You should be able to mess around with VR development in Unity. If you have any issues my contact information is in the <a class=\"underline\" href=\"/about/\">about</a> section of this website.</p>","excerpt":"The Basic Setup of Unity VR on Linux\n\t\n\n\n\n\nGetting Unity up and running on Linux is incredibly easy. To start, we'll install Unity Hub &amp; Unity. Next, we'll import libraries and settings for VR. After that, we'll import an art asset into our scene. Lastly, we'll import &amp; activate VR controls which will allow the player to look around our scene. So let's get started!\n\n\n\n\n\tContents:\n\t\n\t\n\t\tInstalling Unity on Linux\n\t\tCreating a new project\n\t\tImporting assets into your project\n\t\tConclusion\n\t\n\n\n\n\n\tInstalling Unity on Linux:\n\t\n\n\nTo start, you'll want to install Unity Hub. \nIt can be installed in a few ways. You can run the Unity Hub from an appimage by going to \nUnity3D.com, \nclicking download Unity Hub, then running: ./unityhub.appimage in the directory of the appimage.\nThe other way of installing Unity Hub is through a package manager.\nOn Ubuntu run this line to add the Unity Hub repository:\n\t\n\t\t$ sudo sh -c 'echo \"deb https://hub.unity3d.com/linux/repos/deb stable main\" &gt; /etc/apt/sources.list.d/unityhub.list'\n\t\n\tthen, add the public key with:\n\t\n\t\t$ wget -qO - https://hub.unity3d.com/linux/keys/public | sudo apt-key add -\n\t\n\tnow, update your package cache and install the package:\n\t\n\t\t$ sudo apt update\n\t\t$ sudo apt-get install unityhub\n\t\n\tIf you are on any other Linux distro besides Debian based ones, refer to the \n\tUnity3D docs.\n\n\n\n\n\tCreating a new project:\n\t\n\n\n\nIt's super simple to create a new project in Unity. Open the Unity Hub and under the projects tab on the left side, click the blue \"New Project\" button.\n\nOnce your in the New project dialog, scroll down to VR and click on it, click \"Download template\", change the project name, and finally, click the \"Create project\" button!\n\n\n\n\tImporting assets into your project:\n\t\n\n\n\n\nImporting assets into your project is also incredibly easy. To start make a folder for your textures named Textures. Then, get the texture you want to import and drag it into the newly created folder.\nThe texture I'll be importing is one that I made a while ago. The texture is one of the tiles in my old dorm room.\n\n\nWhen following the instructions above I get this:Our texture was successfully imported into Unity!\n\nNow, to use it, drag it onto the \"plane\" object in either the heirarchy or scene window.Then you get:\nOur imported texture is now applied to the plane! To get modify how it looks on the plane, select the plane object. Then in the inspector window, click on the material drop down.\n\n\n\n\tConclusion:\n\t\n\n\nAfter all of that, You should be able to mess around with VR development in Unity. If you have any issues my contact information is in the about section of this website.","languages":null,"categories":["blog"],"tags":["VRT310","Unity","Game Programming"]},{"title":"Games With a Sndata Header Section","permalink":"https://longestboi.github.io/2021/03/games-with-a-sndata-header-section.html","link":"https://longestboi.github.io/2021/03/games-with-a-sndata-header-section.html","date":"2021-03-20T00:00:00-07:00","modified":"2021-03-20T19:28:24-07:00","author":{"name":"Andrew Long","url":"https://LongestBoi.github.io/","email":"AndrewRLong02@gmail.com"},"content":"<style>\n  .excerpt {\n    font-size: 60%;\n    background-color: hsl(var(--bg-color-h), var(--bg-color-s), calc(var(--bg-color-l) * .7));\n    padding: .5em .5em .5em .5em;\n    border-radius: 8px;\n    border: 2px solid;\n    border-color: hsl(var(--bg-color-h), var(--bg-color-s), calc(var(--bg-color-l) / .7));\n    width: 100%;\n\n  }\n\n  .excerpt>p {\n    margin-bottom: unset;\n  }\n\n  summary {\n    font-weight: bold;\n  }\n\n  summary:hover {\n    font-weight: bold;\n    color: var(--link-color);\n  }\n\n  .content details {\n    margin-bottom: unset;\n  }\n\n  h2.sernum {\n    margin-left: 8px;\n    margin-top: 5px;\n    margin-bottom: unset !important;\n  }\n\n  .seps {\n    font-size: 120%;\n    padding-top: .5em;\n    padding-bottom: .1em;\n  }\n</style>\n\n<script>\n  // Borrowed from www.c-sharpcorner.com/blogs/load-text-file-in-javascript1\n  function parseTXT(Textfile, ID) {\n    var txtFile = new XMLHttpRequest();\n    txtFile.open(\"GET\", Textfile, true);\n    txtFile.onreadystatechange = function() {\n      if (txtFile.readyState === 4) {\n        // Makes sure the document is ready to parse.\n        if (txtFile.status === 200) {\n          // Makes sure it's found the file.\n          var temp = txtFile.responseText;\n          temp = temp.replaceAll(\"\\n\", \"<br>\");\n\n          document.getElementById(ID).innerHTML = temp;\n          temp = null;\n        }\n      }\n    }\n    txtFile.send(null)\n  }\n</script>\n\n<h1>Sndata Header section.</h1>\n<p><small>\n  The SN Systems PRODG PS2 SDK will leave a section header labeled “.sndata” this header section contains debug symbols.\n  The section header is, unfortunately, proprietary.\n  However, based on the work of <a href=\"https://twitter.com/diwidog/status/1188831332635267072\" target=\"_blank\" rel=\"noopener noreferrer\">Kiwidoggie</a>,\n  I’ve written a Python script to go to the section header and find the memory address location of the functions and function names.\n  Then, take those functions and function names and put them into a “.txt” for Ghidra or a Python script for IDA (untested).\n</small></p>\n\n<!--end_excerpt-->\n\n<h2 style=\"font-size: 70%; margin-top: unset;\">\n  <a href=\"https://github.com/Longestboi/sndata-converter\" target=\"_blank\" rel=\"noopener noreferrer\">Sndata-converter.py</a>\n</h2>\n\n<hr />\n\n<div>\n  <h1>List games with .sndata header sections.</h1>\n  <p style=\"font-size: 80%; margin-bottom: unset;\">Click on the game title to view debug symbols in Ghidra format</p>\n\n  \n\n  \n\n  <h1 class=\"seps\">Retail Games</h1>\n\n  <!-- AFL Premiership 2006 -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/AFLP06d.txt', 'AFLP06d')\">\n      <div style=\"display: flex;\">AFL Premiership 2006 (Demo)\n        <h2 class=\"sernum\">SCES-54068</h2>\n      </div>\n    </summary>\n    <a href=\"/assets/txt/AFLP06d.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">97 Symbols</span>\n    <div class=\"excerpt\"><code id=\"AFLP06d\"></code></div>\n  </details>\n\n  <!-- MLB 2005 -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/MLB05.txt', 'MLB05')\">\n      <div style=\"display: flex;\">MLB 2005\n        <h2 class=\"sernum\">SCUS-97326</h2>\n      </div>\n    </summary>\n    <a style=\"\" href=\"/assets/txt/MLB05.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">3978 Symbols</span>\n    <div class=\"excerpt\"><code id=\"MLB05\"></code></div>\n  </details>\n\n  <!-- MLB 2006 -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/MLB06.txt', 'MLB06')\">\n      <div style=\"display: flex;\">MLB 2006\n        <h2 class=\"sernum\">SCUS-97347</h2>\n      </div>\n    </summary>\n    <a style=\"\" href=\"/assets/txt/MLB06.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">1773 Symbols</span>\n    <div class=\"excerpt\"><code id=\"MLB06\"></code></div>\n  </details>\n\n  <!-- My Street -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/myst.txt', 'MYST')\">\n      <div style=\"display: flex;\">My Street\n        <h2 class=\"sernum\">SCUS-97212</h2>\n      </div>\n    </summary>\n    <div style=\"display: flex;\">\n      <a href=\"/assets/txt/myst.txt\" download=\"\">⇩ Download</a>\n      <span>\n        <h2 style=\"margin: unset; padding-left: 5px; font-size: 50%; margin-top: 1em;\">\n          *Also has normal debug info\n        </h2>\n      </span>\n      <span class=\"pull-right\" style=\"font-weight: bold; margin: auto 0 auto auto;\">388 Symbols</span>\n    </div>\n\n    <div class=\"excerpt\"><code id=\"MYST\"></code></div>\n  </details>\n\n  <!-- Neopets: the Darkest Faerie -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/npdf.txt', 'NPDF')\">\n      <div style=\"display: flex;\">Neopets: the Darkest Faerie\n        <h2 class=\"sernum\">SCUS-97367</h2>\n      </div>\n    </summary>\n    <a style=\"\" href=\"/assets/txt/npdf.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">396 Symbols</span>\n    <div class=\"excerpt\"><code id=\"NPDF\"></code></div>\n  </details>\n\n  <!-- Resident Evil 4 -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/re4.txt', 'RE4')\">\n      <div style=\"display: flex;\">Resident Evil 4\n        <h2 class=\"sernum\">SLUS-21134</h2>\n      </div>\n    </summary>\n    <a href=\"/assets/txt/re4.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">7407 Symbols</span>\n    <div class=\"excerpt\"><code id=\"RE4\"></code></div>\n  </details>\n\n  \n\n  <h1 class=\"seps\">Demos</h1>\n\n  <!-- MLB 2006 (Demo) -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/MLB06d.txt', 'MLB06D')\">\n      <div style=\"display: flex;\">MLB 2006 (Demo)\n        <h2 class=\"sernum\">SCUS-97460</h2>\n      </div>\n    </summary>\n    <a style=\"\" href=\"/assets/txt/MLB06d.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">1785 Symbols</span>\n    <div class=\"excerpt\"><code id=\"MLB06D\"></code></div>\n  </details>\n\n  <!-- Neopets: the Darkest Faerie (Demo) -->\n  <details>\n    <summary onclick=\"parseTXT('/assets/txt/npdfd.txt', 'NPDFD')\">\n      <div style=\"display: flex;\">Neopets: the Darkest Faerie (Demo)\n        <h2 class=\"sernum\">SCUS-97469</h2>\n      </div>\n    </summary>\n    <a href=\"/assets/txt/npdfd.txt\" download=\"\">⇩ Download</a>\n    <span style=\"font-weight: bold; float:right;\">337 Symbols</span>\n    <div class=\"excerpt\"><code id=\"NPDFD\"></code></div>\n  </details>\n</div>","excerpt":"Sndata Header section.\n\n  The SN Systems PRODG PS2 SDK will leave a section header labeled “.sndata” this header section contains debug symbols.\n  The section header is, unfortunately, proprietary.\n  However, based on the work of Kiwidoggie,\n  I’ve written a Python script to go to the section header and find the memory address location of the functions and function names.\n  Then, take those functions and function names and put them into a “.txt” for Ghidra or a Python script for IDA (untested).","languages":null,"categories":["note"],"tags":["SN Systems","PS2","Reverse Engineering"]}]